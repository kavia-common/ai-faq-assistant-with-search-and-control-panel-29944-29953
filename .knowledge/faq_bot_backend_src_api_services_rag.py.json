{"is_source_file": true, "format": "Python", "description": "This file defines the RagPipeline class, which implements a simple Retrieval-Augmented Generation (RAG) pipeline. It seeds an in-memory vector store with FAQs and documents, retrieves relevant content based on similarity to a query, and uses an AI service to generate answers based on retrieved contexts.", "external_files": ["./vector_store", "./ai_service", "../config/settings"], "external_methods": ["InMemoryVectorStore.add", "InMemoryVectorStore.search", "AIService.generate"], "published": ["RagPipeline"], "classes": [{"name": "RagPipeline", "description": "A class that implements a retrieval-augmented generation pipeline, handling document seeding, retrieval, and answer generation."}], "methods": [{"name": "__init__(self, settings: Settings, ai_service: AIService)", "description": "Initializes the RagPipeline with provided settings and AI service, and seeds the document store.", "scope": "RagPipeline", "scopeKind": "class"}, {"name": "_seed_docs(self)", "description": "Seeds the in-memory vector store with predefined FAQ and document content.", "scope": "RagPipeline", "scopeKind": "class"}, {"name": "List[Dict[str,str]] retrieve(self, query: str, top_k: int = 3)", "description": "Retrieves top-k relevant documents from the store based on a query.", "scope": "RagPipeline", "scopeKind": "class"}, {"name": "Tuple[str,Dict] generate_with_context(self, query: str, contexts: List[Dict[str, str]])", "description": "Uses the AI service to generate an answer based on the query and retrieved contexts.", "scope": "RagPipeline", "scopeKind": "class"}], "calls": ["self.store.add", "self.store.search", "self.ai_service.generate"], "search-terms": ["RAG pipeline", "InMemoryVectorStore", "AIService", "retrieve", "seed_docs", "generate_with_context"], "state": 2, "file_id": 11, "knowledge_revision": 24, "git_revision": "", "ctags": [{"_type": "tag", "name": "RagPipeline", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/rag.py", "pattern": "/^class RagPipeline:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/rag.py", "pattern": "/^    def __init__(self, settings: Settings, ai_service: AIService):$/", "language": "Python", "kind": "member", "signature": "(self, settings: Settings, ai_service: AIService)", "scope": "RagPipeline", "scopeKind": "class"}, {"_type": "tag", "name": "_seed_docs", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/rag.py", "pattern": "/^    def _seed_docs(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RagPipeline", "scopeKind": "class"}, {"_type": "tag", "name": "generate_with_context", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/rag.py", "pattern": "/^    def generate_with_context(self, query: str, contexts: List[Dict[str, str]]) -> Tuple[str, Di/", "language": "Python", "typeref": "typename:Tuple[str,Dict]", "kind": "member", "signature": "(self, query: str, contexts: List[Dict[str, str]])", "scope": "RagPipeline", "scopeKind": "class"}, {"_type": "tag", "name": "retrieve", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/rag.py", "pattern": "/^    def retrieve(self, query: str, top_k: int = 3) -> List[Dict[str, str]]:$/", "language": "Python", "typeref": "typename:List[Dict[str,str]]", "kind": "member", "signature": "(self, query: str, top_k: int = 3)", "scope": "RagPipeline", "scopeKind": "class"}], "hash": "d5d0e3a871a773eb36ed67dea80dfc8f", "format-version": 4, "code-base-name": "faq_bot_backend", "filename": "faq_bot_backend/src/api/services/rag.py", "revision_history": [{"24": ""}]}