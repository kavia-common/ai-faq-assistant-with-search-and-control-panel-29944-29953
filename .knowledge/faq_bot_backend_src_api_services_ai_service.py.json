{"is_source_file": true, "format": "Python", "description": "This file contains classes and functions for an AI service interface, including model management and text generation, as well as an in-memory vector store implementation for similarity search.", "external_files": [], "external_methods": [], "published": ["AIService"], "classes": [{"name": "AIService", "description": "A minimal AI service abstraction to simulate GPT-like generation, supporting model selection and mock generation."}, {"name": "InMemoryVectorStore", "description": "A simple in-memory vector store for text embeddings using cosine similarity for document retrieval."}], "methods": [{"name": "List[Dict[str,str]] get_available_models(self)", "description": "Returns a list of available AI models.", "scope": "AIService", "scopeKind": "class"}, {"name": "str get_active_model(self)", "description": "Returns the name of the currently active model.", "scope": "AIService", "scopeKind": "class"}, {"name": "bool set_active_model(self, model_name: str)", "description": "Sets the active model to the provided model name if available; returns True if successful.", "scope": "AIService", "scopeKind": "class"}, {"name": "Tuple[str,Dict] generate(self, prompt: str, context_snippets: List[Dict[str, str]])", "description": "Generates a mock answer based on prompt and context snippets, simulating a GPT-like response.", "scope": "AIService", "scopeKind": "class"}, {"name": "List[str] _tokenize(text: str)", "description": "Tokenizes text into lowercase words, removing punctuation.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,float] _tf(tokens: List[str])", "description": "Calculates term frequency weights for a list of tokens.", "scope": "", "scopeKind": ""}, {"name": "float _cosine_sim(v1: Dict[str, float], v2: Dict[str, float])", "description": "Computes cosine similarity between two sparse vector representations.", "scope": "", "scopeKind": ""}, {"name": "str add(self, text: str, source: str)", "description": "Adds a text document to the vector store, assigning it an ID.", "scope": "InMemoryVectorStore", "scopeKind": "class"}, {"name": "List[Tuple[Dict,float]] search(self, query: str, top_k: int = 3)", "description": "Searches the vector store for documents similar to the query, returning top_k results.", "scope": "InMemoryVectorStore", "scopeKind": "class"}, {"name": "__init__(self)", "scope": "InMemoryVectorStore", "scopeKind": "class", "description": "unavailable"}], "calls": ["self.get_available_models()", "self.get_active_model()", "self.set_active_model(model_name)", "self.generate(prompt, context_snippets)", "_tokenize(text)", "_tf(tokens)", "_cosine_sim(v1, v2)", "self._docs.append(...)", "self.search(query, top_k)"], "search-terms": ["AIService", "vector store", "cosine similarity", "model management", "text generation", "mock AI service", "in-memory vector search", "language model interface"], "state": 2, "file_id": 10, "knowledge_revision": 42, "git_revision": "", "revision_history": [{"22": ""}, {"41": ""}, {"42": ""}], "ctags": [{"_type": "tag", "name": "AIService", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^class AIService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "InMemoryVectorStore", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^class InMemoryVectorStore:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "InMemoryVectorStore", "scopeKind": "class"}, {"_type": "tag", "name": "_active_model", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^    _active_model: str = \"gpt-mini\"$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "AIService", "scopeKind": "class"}, {"_type": "tag", "name": "_cosine_sim", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^def _cosine_sim(v1: Dict[str, float], v2: Dict[str, float]) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "function", "signature": "(v1: Dict[str, float], v2: Dict[str, float])"}, {"_type": "tag", "name": "_models", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^    _models: List[Dict[str, str]] = [$/", "language": "Python", "typeref": "typename:List[Dict[str, str]]", "kind": "variable", "scope": "AIService", "scopeKind": "class"}, {"_type": "tag", "name": "_tf", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^def _tf(tokens: List[str]) -> Dict[str, float]:$/", "language": "Python", "typeref": "typename:Dict[str,float]", "kind": "function", "signature": "(tokens: List[str])"}, {"_type": "tag", "name": "_tokenize", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^def _tokenize(text: str) -> List[str]:$/", "language": "Python", "typeref": "typename:List[str]", "kind": "function", "signature": "(text: str)"}, {"_type": "tag", "name": "add", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^    def add(self, text: str, source: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, text: str, source: str)", "scope": "InMemoryVectorStore", "scopeKind": "class"}, {"_type": "tag", "name": "generate", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^    def generate(self, prompt: str, context_snippets: List[Dict[str, str]]) -> Tuple[str, Dict]:$/", "language": "Python", "typeref": "typename:Tuple[str,Dict]", "kind": "member", "signature": "(self, prompt: str, context_snippets: List[Dict[str, str]])", "scope": "AIService", "scopeKind": "class"}, {"_type": "tag", "name": "get_active_model", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^    def get_active_model(self) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self)", "scope": "AIService", "scopeKind": "class"}, {"_type": "tag", "name": "get_available_models", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^    def get_available_models(self) -> List[Dict[str, str]]:$/", "language": "Python", "typeref": "typename:List[Dict[str,str]]", "kind": "member", "signature": "(self)", "scope": "AIService", "scopeKind": "class"}, {"_type": "tag", "name": "search", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^    def search(self, query: str, top_k: int = 3) -> List[Tuple[Dict, float]]:$/", "language": "Python", "typeref": "typename:List[Tuple[Dict,float]]", "kind": "member", "signature": "(self, query: str, top_k: int = 3)", "scope": "InMemoryVectorStore", "scopeKind": "class"}, {"_type": "tag", "name": "set_active_model", "path": "/home/kavia/workspace/code-generation/ai-faq-assistant-with-search-and-control-panel-29944-29953/faq_bot_backend/src/api/services/ai_service.py", "pattern": "/^    def set_active_model(self, model_name: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, model_name: str)", "scope": "AIService", "scopeKind": "class"}], "hash": "f28926587530af6c12593ade580952a8", "format-version": 4, "code-base-name": "faq_bot_backend", "filename": "faq_bot_backend/src/api/services/ai_service.py", "fields": [{"name": "str _active_model", "scope": "AIService", "scopeKind": "class", "description": "unavailable"}, {"name": "List[Dict[str, str]] _models", "scope": "AIService", "scopeKind": "class", "description": "unavailable"}]}